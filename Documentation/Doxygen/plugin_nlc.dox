/**
\page plugin_nlc Nonlinear Constraint Plugins

Nonlinear constraints allow you to impose certain constraints on a model. The nonlinear constraints in FEBio implement the augmented Lagrangian algorithm for enforcing the constraints. This implies that the Lagrange multipliers are not calculated directly, but instead updated in an iterative approach. The process of updating the Lagrange multipliers is referred to as an augmentation in FEBio. During an augmentation each nonlinear constraint class needs to update the approximate Lagrange multipliers and determine whether they have converged. Most of this will need to be done in the Augment method, which is explained below. 


\section nlc_base The FENLConstraint class
The base class of all nonlinear constraints in FEBio is the FENLConstraint class, and thus this class must also be the base class of all nonlinear constraint plugins. 

The FENLConstraint base class defines the following abstract members. 

\li <b>Residual</b>: calculate the contribution to the model's residual.
\li <b>StiffnessMatrix</b>: Calculate the contribution to the model's stiffness matrix.
\li <b>Augment</b>: Update Lagrange multipliers and determine convergence
\li <b>BuildMatrixProfile</b>: Must be implemented if the nonlinear constraint generates nonzero entries in the stiffness matrix that would otherwise not exist.

These functions are described in more detail below.

\section nlc_residual The Residual function
The Residual function implements the contribution to the model's residual, which in FEBio is defined as the difference between the internal forces (e.g. stresses), and external forces. 

The function definition has two parameters.
\li <b>FEGlobalVector</b>: the vector that stores the residual. 
\li <b>FETimeInfo</b>: information of the current time point.

Once the contributions to the residual are calculated, they can be assembled in the residual vector via FEGlobalVector::Assemble. 

\section nlc_stiffness The StiffnessMatrix function
The StiffnessMatrix function implements the contribution to the model's global stiffness matrix. This function takes two parameters.

\li <b>FESolver</b>: The solver that is calling this funcion. This is used mostly for assembling. 
\li <b>FETimeInfo</b>: information of the current time point.

Contributions to the global stiffness matrix are added by calling one of the Assemble members of the FESolver class. 

\section nlc_augment The Augment function
As mentioned above, FEBio implements the augmented Lagrangian method for enforcing nonlinear constraints. This means that during the Newton iterations the (approximate) Lagrange multipliers are held constant. After the Newton iteration converges, each nonlinear constraint gets a chance to update the Lagrange multipliers and determine whether they converged. This is done in the Augment function. This function takes two parameters:

\li <b>int naug</b>: The augmentation number
\li <b>FETimeInto& tp</b>: information on the current time point

The return value, a boolean, should indicate whether the Lagrange multipliers have converged or not. 

\section nlc_matrix The BuildMatrixProfile function
Since the global matrix is usually sparse in a finite-element analysis, FEBio only allocates the nonzero entries of the matrix. It does this by inspecting the connectivity of the mesh. However, nonlinear constraints can sometimes couple additional degrees of freedom that are not directly connected in the mesh. For instance, consider a constraint that forces two nodes to remain equidistance (this is implemented in FEBio in the FEDistanceConstraint). If the two nodes do not belong to the same element, the constraint will generate nonzero entries for the stiffness matrix that would otherwise not exist. In this situation, the nonlinear constraint must implement the BuildMatrixProfile method and add the nonzero matrix elements to the profile. 

*/
