/**

\page plugin_solver Solver Plugins

This section describes how to implement a new FE solver for FEBio as a plugin. Developing a new solver requires at a minimum the implementation
of a new solver class, a new material class, and a new domain class. 

\section solver_sec1 Choosing the base class
The FECore library offers several base classes that can be used to develop a custom FE solver. The most general one is the FESolver
base class, but implementing a solver from this base class is quite challenging. For this reason, two additional classes are offered 
that already implement most of the solution logic. The base classes are:

\li <c>FELinearSolver</c>: base class for models that result in a linear set of equations
\li <c>FENewtonSolver</c>: base class for models that result in a nonlinear set of equations

\section solver_sec2 The FELinearSolver base class

This base class can be used to develop solvers that result in a linear system of equations. 

\code
class MyLinearSolver : public FELinearSolver
{
public:
	MyLinearSolver(FEModel* fem);
	
	bool InitEquations();
	
	void ForceVector(FEGlobalVector& R);
	
	bool StiffnessMatrix(FELinearSystem& K);
};
\endcode

Four functions must be implemented. 

\subsection The Constructor
The construct of the solver class needs to define the solution variable and degrees of freedom that this solver uses. 

\code
MyLinearSolver::MyLinearSolver(FEModel* fem) : FELinearSolver(fem)
{
	// define the solution variable that this solver will use
	DOFS& dofs = fem->GetDOFS();
	int varT = dofs.AddVariable("temperature");
	dofs.SetDOFName(varT, 0, "T");
}
\endcode

The DOFS structure manages all the variables and degrees of freedom that are defined for the FEModel. A variable can manage
multiple degrees of freedom (e.g. a displacement variable can have an x, y, and z degree of freedom). Each degree of freedom can be
given a symbol using the DOFS::SetDOFName method. This symbol will be used in the FEBio input file to reference that degree of freedom 
(e.g. in a fixed or prescribed bc).

\subsection InitEquations
The InitEquations function is called to assign equation numbers to the degrees of freedom. 

\code
bool MyLinearSolver::InitEquations()
{
	int dof_T = GetFEModel().GetDOFIndex("T");
	vector<int> dof;
	dof.push_back(dof_T);
	SetDOF(dof_T);
	
	return FELinearSolver::InitEquations();
}
\endcode

The base class <c>FELinearSolver</c> does most of the work, but the solver needs to set which degrees of freedom will be solved for with
the FELinearSolver::SetDOF function. 

\subsection ForceVector

This function is called by the base class whenever the right-hand side must be evaluated. The solver must implement all the terms that 
contribute to the right-hand side vector of the model. 

\code
void FEHeatSolver::ForceVector(FEGlobalVector& R)
{
	// implement terms that contribute to right-hand side vector
}
\endcode

The parameter that is passed by this function is an object of type FEGlobalVector that represents the right-hand side vector. It also offers
methods for assembling element force vectors into the global vector. 

\subsection StiffnessMatrix

This function is called by the base class whenever the stiffness matrix must be evaluated. The solver must implement all the terms that 
contribute to the stiffness matrix of the model. 

\code
bool FEHeatSolver::StiffnessMatrix(FELinearSystem& K)
{
	// implement terms that contribute to the stiffness matrix
}
\endcode

The parameter that is passed by this function is an object of type FELinearSystem that represents the linear system of equations. It also offers
methods for assembling element quantities.

\section solver_sec3 Custom Material class

The material parameters that the solver class uses will be implemented in a new material class. 

\code
class MyMaterial : public FEMaterial
{
public:
	MyMaterial(FEModel* fem);
	
	DECLARE_PARAMETER_LIST();
};
\endcode

See the section on Material plugins for more information on defining custom materials. 

\section solver_sec4 Custom Domain class

A domain is a partiation of the mesh that will be used by the solver to solve the model on. Usually, the domain class is responsible for implementing 
the terms that contribute to the stiffness and force vector. It should also store a pointer to the material that it uses.

\code
class MyDomain : public FESolidDomain
{
public:
	MyDomain(FEModel* fem);
	
	void SetMaterial(FEMaterial* mat);
	
	bool Initialize();
	
	void Update(const FETimeInfo& tp);
	
private:
	MyMaterial*	m_mat;
};
\endcode


\subsection Domain Initialization

Although the solver sets the solution variable and degrees of freedom, the domain decides which degrees of freedom are active within that domain. 

\code
bool MyDomain::Initialize()
{
	if (FESolidDomain::Initialize() == false) return false;
	
	vector<int> dof;
	dof.push_back(GetFEModel().GetDOFIndex("T"));
	SetDOF(dof);

	return true;
}
\endcode

*/
